<?php

namespace LSUser\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Zend\Crypt\Key\Derivation\Pbkdf2;
/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    /**
     * findByLoginAndPassword
     *
     * Retorna o registro do usuário
     *
     * @param  string $login
     * @param  string $password
     * @return array
     */
    public function findByLoginAndPassword($login, $password) {

        $query = "SELECT u.id, u.name, u.login, u.password, u.salt,  tu.id as category_id, tu.description as category FROM LSUser\\Entity\\User u JOIN u.typeUse tu  WHERE u.active = true AND tu.active = true AND u.login = '".$login."' ";

        $user = $this->_em->createQuery($query)->getResult();

        if ($user) {
            $hashSenha = $this->encryptPassword($password, $user[0]['salt']);

            if ($hashSenha == $user[0]['password']) {
                return $user;
            }
            else
                return false;
        }
        else
            return false;

    }

    /**
     * findTypeUser
     *
     * Retorna o tipo de usuário
     *
     * @param  integer $id
     * @return array
     */
    public function findTypeUser($id)
    {
        $query = "SELECT tu.description FROM LSUser\\Entity\\User u JOIN u.typeUse tu WHERE u.active = true AND tu.active = true AND u.id = {$id}";

        return $this->_em->createQuery($query)->getResult();
    }


  /**
   * encryptLoginAndPassword
   *
   * @param string $senhaOrPassword
   * @param integer $iterations
   * @return string hash
   */
  public function encryptPassword($password, $salt)
  {
    return base64_encode(Pbkdf2::calc('sha256', $password, $salt, 15000, strlen($password * 2)));
  }

}
